#! /usr/bin/perl
# nagios: -epn
#
# Logg in on html form, check content after login
# anders@fupp.net, 2012-10-02

use WWW::Mechanize::GZip;
use Getopt::Std;
use Data::Dumper;
use JSON;

getopts('l:f:g:u:p:r:x:y:dc:ka:');

sub usage {
	print "check_http_formlogin_content -l <login url> -f <form id> [-g <get url>]\n";
	print "-u <username> -p <password> -r <regexp response> [-x <username field]\n";
	print "-y <password field> [-c <link class to follow to find form>] [-k (keep hidden inputs)]\n";
	print "[-a <form action url>]\n";
	exit(3);
}

sub wexit {
	my $text = shift;
	print $text . "\n";
	exit(1);
}

usage unless (($opt_c || $opt_l) && $opt_f && $opt_u && $opt_p && $opt_r);
if ($opt_x) {
	$ufield = $opt_x;
} else {
	$ufield = "username";
}
if ($opt_y) {
	$pfield = $opt_y;
} else {
	$pfield = "password";
}
$page = $opt_l;

my $mech = WWW::Mechanize::GZip->new(
# Must check results instead
	autocheck => 0
);

if ($opt_d) {
	# Print requests and responses then
	$mech->add_handler(request_send => sub {
			my $req = shift;
			print "\n=== BEGIN HTTP REQUEST ===\n";
			print $req->dump();
			print "\n=== END HTTP REQUEST ===\n";
			return
		}
	);
	$mech->add_handler(response_done => sub {
			my $res = shift;
			print "\n=== BEGIN HTTP RESPONSE ===\n";
			print $res->dump();
			print "\n=== END HTTP RESPONSE ===\n";
			return
		}
	);
}

wexit("Could not fetch login URL $opt_l") unless ($mech->get($opt_l));

if ($opt_c) {
	wexit("Could not find link class $opt_c") unless ($link = $mech->find_link (class_regex => qr/$opt_c/i));
	wexit("Could not follow link class $opt_c") unless ($mech->get($link->[0]));
	
#	print "DEBUG: Currently I have this content:\n" . $mech->content();
#	wexit("Could not follow link $opt_o") unless ($mech->follow_link (url_regex => qr/$opt_o/i));
}

if (!($form = $mech->form_id($opt_f))) {
	wexit "Could not find form $opt_f in login URL $opt_l";
}
if ($opt_a) {
	$action = $opt_a;
} else {
	if (!($action = $form->action)) {
		wexit "Could not find action for form $opt_f in login URL $opt_l";
	}
}

%postdata = (
	"$ufield" => $opt_u,
	"$pfield" => $opt_p,
);
if ($opt_k) {
	# Keep hidden params
	@inputs = $form->inputs;
	foreach $input (@inputs) {
		$name = $input->name;
		$value = $input->value;
		if ($input->type eq "hidden") {
			$postdata{"$name"} = $value;
		} else {
		}
	}
}

if ($opt_d) { print "Posting to action URL $action.\nPost data:\n" . Dumper(%postdata); }
$response = $mech->post($action, \%postdata);
# Can not use submit_form as form action url actually does not work with SPID
#$response = $mech->submit_form(form_id => $opt_f,
#			with_fields => \%postdata);
if ($response->is_error) {
	wexit("Failed to post to action URL $action: " . $response->status_line);
}
if ($opt_d) {
	print "Post got response code " . $response->code . "\n";
	print "Content:\n" . $response->content;
}

if ($response->code =~ /^(301|302)$/ && undef($opt_g)) {
	if ($opt_d) { print "Got new location: " . $response->header("Location") . "\n"; }
	$response = $mech->get($response->header("Location"));
	wexit("Got a redirect to " . $response->header("Location") . " but could not follow it.") unless ($response->is_success);
} elsif ($response->header("Content-Type") eq "application/json") {
	$txtref = eval { decode_json $response->content };
	if ($@) {
		wexit "Got json response after posting to $action and could not parse it.";
	} else {
		%txt = %$txtref;
		if (defined($txt{"redirect"})) {
			$response = $mech->get($txt{"redirect"});
			wexit("Got a json redirect to " . $txt{"redirect"} . " but could not follow it.") unless ($response->is_success);
		}
	}
} elsif ($response->code !~ /^200$/) {
	wexit "Got unexpected response " . $response->code . " " . $response->message . " when posting form to URL $opt_l.";
}

if ($opt_g) {
	if ($response = $mech->get($opt_g)) {
		$page = $opt_g;
	} else {
		wexit "Failed to get get URL $opt_g after posting.";
	}

	if ($response->code != 200) {
		wexit "Got unexpected response " . $response->code . " " . $response->message . " when loading get URL $opt_g.";
	}
}

if ($response->content =~ /$opt_r/) {
	print "Page $page contains desired string $opt_r.\n";
	exit(0);
} else {
	if ($opt_d) {
		print "Currently I had this content:\n" . $mech->content();
	}
	wexit "Page $page does not contain desired string $opt_r.";
}
