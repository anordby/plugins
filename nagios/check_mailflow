#! /usr/bin/perl -T
# nagios: -epn
# Check mailflow plugin for Nagios
# 2006-03-28, anders@bsdconsulting.no

package NagiosMailflow;
use Getopt::Std;
use strict;
use Sys::Hostname;

# Debian packages needed:
# libnet-smtp-ssl-perl
# libmail-pop3client-perl

getopts('s:3:i:u:p:l:f:r:w:c:dSXA');
use vars qw { $opt_s $opt_3 $opt_i $opt_u $opt_p $opt_f $opt_r $opt_l $opt_c $opt_w $opt_d $opt_S $opt_X $debug $smtp_port $smtp $opt_A $opt_t $timeout };
if ($opt_3) {
	use Mail::POP3Client;
}
if ($opt_i) {
	use Mail::IMAPClient;
}
if ($opt_S) {
	use Net::SMTP::SSL;
} else {
	use Net::SMTP;
}
if ($opt_t) {
	$timeout = $opt_t;
} else {
	$timeout = 10;
}

# -s <smtp server> (mandatory)
# -3 <pop server>
# -i <imap server>
# -u <username> (mandatory, for pop/imap server)
# -p <password> (mandatory, for pop/imap server)
# -l <local hostname (for helo)>
# (either choose pop or imap)
# -f <from address> (mandatory)
# -r <recipient address (mandatory)
# -w <warning sleep> (mandatory)
# -c <critical sleep> (mandatory)
# -d (debug, optional)

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

$NagiosMailflow::magicstart = "%%NAGIOSMAILFLOW: ";
$NagiosMailflow::subject = "Nagios mailflow check";

sub critical {
	print "CRITICAL: $_[0]\n";
	exit(2);
}
sub unknown {
	print "UNKNOWN: $_[0]\n";
	exit(3);
}
sub warning {
	print "WARNING: $_[0]\n";
	exit(1);
}
sub ok {
	print "OK: $_[0]\n";
	exit(0);
}

sub usage {
	print "check_mailflow -r <recipient> -f <from address> -3 <pop3 server>\n";
	print "-i <imap server> -h <hostname> (pop3/imap server) -s <smtp server>\n";
	print "[-l <local hostname> (for helo)] [-d (debug)] -w <warning (seconds)>\n";
	print "-c <critical (seconds)> [-S (use SSL for SMTP)] [-X (use SSL for POP/IMAP)]\n";
	print "[-A (perform SMTP authenticate)] [-t (timeout)]\n";
	print "\nSMTP authenticate uses same username and password as for POP3/IMAP.\n";
	print "Timeout sets timeout for SMTP and POP3/IMAP connection.\n";
	exit(3);
}

usage unless ($opt_r && $opt_f && ($opt_3 || $opt_i) && $opt_s && ($opt_w || $opt_c) && $opt_u && $opt_p);

if ($opt_d) {
	$debug = 1;
} else {
	$debug = 0;
}
if ($opt_S) {
	$smtp_port = 465;
} else {
	$smtp_port = 25;
}

if ($opt_3) {
	if ($opt_3 =~ /^([\s\w\.-_]+)$/) {
		# untaint pop3server
		$opt_3 = $1;
	} else {
		unknown("Bad data in POP3 server name");
	}
} else {
	if ($opt_i =~ /^([\s\w\.-_]+)$/) {
		# untaint imapserver
		$opt_i = $1;
	} else {
		unknown("Bad data in IMAP server name");
	}
}
if ($opt_s =~ /^([\s\w\.-_]+)$/) {
	# untaint mailserver
	$opt_s = $1;
} else {
	unknown("Bad data in SMTP server name");
}
unknown("Critical waiting time must be longer than warning") if ((($opt_c) && ($opt_w)) && ($opt_w >= $opt_c));

sub sender {
	my $text = shift;
	my $hello = $Sys::Hostname::host;
	my $smtp;
	if ($opt_d) {
		print "Attempt SMTP to host $opt_s on port $smtp_port, helo $hello\n";
	}
	if ($opt_S) {
		$smtp = Net::SMTP::SSL->new(
			Host => $opt_s,
			Hello => $hello,
			Timeout => $timeout,
			Debug => $debug,
			Port => $smtp_port,
		);
	} else {
		$smtp = Net::SMTP->new(
			Host => $opt_s,
			Hello => $hello,
			Timeout => $timeout,
			Debug => $debug,
			Port => $smtp_port,
		);
	}

	unless (defined($smtp)) {
		critical("Could not connect to SMTP server $opt_s on port $smtp_port: $@");
	}

	if ($opt_A) {
		$smtp->auth($opt_u, $opt_p) or critical("Could not authenticate with SMTP: " . $smtp->code(), " ", $smtp->message);
	}

	$smtp->mail($opt_f);
	$smtp->recipient($opt_r);
	$smtp->data;
	$smtp->datasend("From: $opt_f\n");
	$smtp->datasend("To: $opt_r\n");
	$smtp->datasend("Subject: " . $NagiosMailflow::subject . "\n");
	$smtp->datasend("\n");
	$smtp->datasend($text);
	$smtp->dataend;
	$smtp->quit;
}

sub randchar {
	my $number = int rand (62)+1;
	my $pos;

        if ($number<11) { $pos = $number+47; }
        elsif ($number<37) { $pos = $number-10+64; }
        else { $pos = $number-10-26+96; }

        return chr($pos);
}

sub randstr {
	my $str = "";
	for (my $i = 0; $i <= 20; $i++) {
		$str .= randchar;
	}
	return $str;
}

sub ckpop {
	my $ssl_pop = ($opt_X) ? 1 : 0;
	my $ssl_txt = ($opt_X) ? "on" : "off";
	my $pop = new Mail::POP3Client( USER     => $opt_u,
					PASSWORD => $opt_p,
					HOST     => $opt_3,
					DEBUG    => 1,
					USESSL   => $ssl_pop,
					TIMEOUT  => $timeout,
					);
	if ($pop->Count() == -1) {
		critical("Could not connect to pop3 server on $opt_3 (SSL: $ssl_txt): $!");
	}
	for (my $i = 1; $i <= $pop->Count(); $i++) {
		if ($opt_d) { print "DEBUG: Checking POP mail $i.. "; }
		if ($pop->Body($i) =~ /$NagiosMailflow::magic/) {
			# Yep, found it
			if ($opt_d) { print "FOUND\n"; }
			$pop->Delete($i);
			$pop->Close;
			return(1);
		} else {
			if ($opt_d) { print "MISSING\n"; }
		}
	}
	$pop->Close;
	return(0);
}

sub ckimap {
	my $ssl_imap = ($opt_X) ? 1 : 0;
	my $ssl_txt = ($opt_X) ? "on" : "off";
	my $imap;
	my $msg;
	my @search;
	@search=("UNDELETED", "SUBJECT", $NagiosMailflow::subject);
	$imap = Mail::IMAPClient->new(
		Server		=> $opt_i,
		User		=> $opt_u,
		Password	=> $opt_p,
		Ssl		=> $ssl_imap,
		Timeout		=> $timeout,
		Uid		=> 1,
		Debug		=> $debug,
	) or critical("Could not connect to IMAP server on $opt_i (SSL: $ssl_txt): $@");
	$imap->select("INBOX") or critical("Could not select INBOX while fetching IMAP mail: $@");
	my @msgs = $imap->search(@search) or critical("Could not get messages list: $@");
	foreach $msg (@msgs) {
		if ($opt_d) { print "DEBUG: Checking IMAP mail $msg.. "; }
		if ($imap->message_string($msg) =~ /$NagiosMailflow::magic/) {
			if ($opt_d) { print "FOUND\n"; }
			$imap->delete_message($msg);
			$imap->close("INBOX");
			$imap->logout();
			return(1);
		} else {
			if ($opt_d) { print "MISSING\n"; }
		}
	}
	$imap->close("INBOX");
	$imap->logout();

	return(0);
}

sub ckmail {
	if ($opt_3) {
		return(ckpop);
	} else {
		return(ckimap);
	}
}

# Set optional local hostname
if ($opt_l) { $Sys::Hostname::host = $opt_l };

# Seed random
srand(time() ^ ($$ + ($$ << 15)) );
# The magic text to send and look for
$NagiosMailflow::magic = "%%NAGIOSMAILFLOW: " . randstr . " %%";
# Send the mail
sender($NagiosMailflow::magic . "\n");

if ($opt_w) {
	sleep($opt_w);
	if(ckmail) {
		if ($opt_3) {
			ok("Found test mail on $opt_3 (POP3 server), after $opt_w seconds wait time");
		} else {
			ok("Found test mail on $opt_i (IMAP server), after $opt_w seconds wait time");
		}
	} elsif (!$opt_c) {
		if ($opt_3) {
			warning("Did not find test mail on $opt_3 (POP3 server), after $opt_w seconds wait time");
		} else {
			warning("Did not find test mail on $opt_i (IMAP server), after $opt_w seconds wait time");
		}
	}
}

if ($opt_c) {
	sleep($opt_c-$opt_w);
	if(ckpop) {
		if ($opt_3) {
			if ($opt_w) {
				warning("Found test mail on $opt_3 (POP3 server), after $opt_c seconds wait time");
			} else {
				ok("Found test mail on $opt_3 (POP3 server), after $opt_c seconds wait time");
			}
		} else {
			if ($opt_w) {
				warning("Found test mail on $opt_i (IMAP server), after $opt_c seconds wait time");
			} else {
				ok("Found test mail on $opt_i (IMAP server), after $opt_c seconds wait time");
			}
		}
	} else {
		if ($opt_3) {
			critical("Did not find test mail on $opt_3 (POP3 server), after $opt_c seconds wait time");
		} else {
			critical("Did not find test mail on $opt_i (IMAP server), after $opt_c seconds wait time");
		}
	}
}
